class KruskalMST:
    def __init__(self, n, edges):
        self.n = n  # Número de municipios (nodos)
        self.edges = sorted(edges)  # Lista de aristas (costo, u, v)
        self.parent = list(range(n))  # Estructura Union-Find
        self.mst = []  # Aristas del árbol de recubrimiento mínimo
        self.total_cost = 0  # Costo total

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            self.parent[root_v] = root_u
            return True
        return False

    def construir_mst(self):
        for cost, u, v in self.edges:
            if self.union(u, v):
                self.mst.append((u, v, cost))
                self.total_cost += cost
                if len(self.mst) == self.n - 1:
                    break
        return self.mst, self.total_cost

def main():
    # Ejemplo de entrada
    n = 5  # Número de municipios (0 a 4)
    edges = [
        (10, 0, 1),
        (15, 0, 2),
        (20, 1, 2),
        (25, 1, 3),
        (30, 2, 3),
        (5, 3, 4),
        (8, 2, 4)
    ]

    kruskal = KruskalMST(n, edges)
    mst, cost = kruskal.construir_mst()

    print("Conexiones seleccionadas para la red (MST):")
    for u, v, c in mst:
        print(f"{u} - {v} : {c} pesos")
    print(f"Costo total: {cost} pesos colombianos")

if __name__ == "__main__":
    main()
